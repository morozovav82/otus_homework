{
	"info": {
		"_postman_id": "77af9b06-b826-40d8-89ba-55106c94f02a",
		"name": "Magazine API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "регистрация пользователя",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"userFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"))\r",
							"pm.environment.set(\"userLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"))\r",
							"pm.environment.set(\"userLogin\", pm.environment.get(\"userLastName\") + \"_\" + pm.environment.get(\"userFirstName\"))\r",
							"pm.environment.set(\"userEmail\", pm.variables.replaceIn(\"{{userLogin}}\" + \"@example.com\"))\r",
							"pm.environment.set(\"userPhone\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))\r",
							"pm.environment.set(\"userPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"))"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => {\r",
							"  pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"var responseJSON = JSON.parse(responseBody)\r",
							"pm.collectionVariables.set(\"userId\", responseJSON[\"id\"])\r",
							"pm.collectionVariables.set(\"userFirstName\", pm.environment.get(\"userFirstName\"))\r",
							"pm.collectionVariables.set(\"userLastName\", pm.environment.get(\"userLastName\"))\r",
							"pm.collectionVariables.set(\"userLogin\", pm.environment.get(\"userLogin\"))\r",
							"pm.collectionVariables.set(\"userPhone\", pm.environment.get(\"userPhone\"))\r",
							"pm.collectionVariables.set(\"userEmail\", pm.environment.get(\"userEmail\"))\r",
							"pm.collectionVariables.set(\"userPassword\", pm.environment.get(\"userPassword\"))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"firstname\": \"{{userFirstName}}\",\r\n  \"lastname\": \"{{userLastName}}\",\r\n  \"username\": \"{{userLogin}}\",\r\n  \"email\": \"{{userEmail}}\",\r\n  \"phone\": \"{{userPhone}}\",\r\n  \"password\": \"{{userPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/auth/reg",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"reg"
					]
				}
			},
			"response": []
		},
		{
			"name": "вход админа",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/auth/login?login=admin&password=admin",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"login"
					],
					"query": [
						{
							"key": "login",
							"value": "admin"
						},
						{
							"key": "password",
							"value": "admin"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "назначение прав пользователю",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "X-UserId",
						"type": "text",
						"value": "1"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/users/user/{{userId}}/assignRole/ROLE_MANAGER",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"user",
						"{{userId}}",
						"assignRole",
						"ROLE_MANAGER"
					]
				}
			},
			"response": []
		},
		{
			"name": "выход админа",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Cookie",
						"type": "text",
						"value": "JSESSIONID={{sessionId}}"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/auth/logout",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "вход пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"sessionId\", pm.cookies.get('JSESSIONID'))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/auth/login?login={{userLogin}}&password={{userPassword}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"login"
					],
					"query": [
						{
							"key": "login",
							"value": "{{userLogin}}"
						},
						{
							"key": "password",
							"value": "{{userPassword}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "положить деньги на счет",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"if (!!responseBody) {\r",
							"    var responseJSON = JSON.parse(responseBody)\r",
							"\r",
							"    pm.test(\"Balance is 1000$\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(1000).to.eql(responseJson.balance);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "money",
							"value": "1000",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/bill/account/{{userId}}/depositMoney",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"bill",
						"account",
						"{{userId}}",
						"depositMoney"
					]
				}
			},
			"response": []
		},
		{
			"name": "создать товар",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => {\r",
							"  pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"var responseJSON = JSON.parse(responseBody)\r",
							"pm.collectionVariables.set(\"productId\", responseJSON[\"id\"])"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"{{$randomProduct}}\",\r\n  \"description\": \"{{$randomProductName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/product",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"product"
					]
				}
			},
			"response": []
		},
		{
			"name": "назначить цену на товар",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseJSON = JSON.parse(responseBody)\r",
							"\r",
							"pm.test(\"Price = 100$\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(100).to.eql(responseJson.price);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/product/{{productId}}/setPrice?price=100",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"product",
						"{{productId}}",
						"setPrice"
					],
					"query": [
						{
							"key": "price",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "добавить товар на склад",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseJSON = JSON.parse(responseBody)\r",
							"\r",
							"pm.test(\"Qnt = 10\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.quantity).to.eql(10);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/product/{{productId}}/addQnt?qnt=10",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"product",
						"{{productId}}",
						"addQnt"
					],
					"query": [
						{
							"key": "qnt",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "проверка товара",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseJson = JSON.parse(responseBody)\r",
							"pm.collectionVariables.set(\"productPrice\", responseJson.price)\r",
							"\r",
							"pm.test(\"Quantity is 10\", () => {\r",
							"    pm.expect(responseJson.quantity).to.eql(10);\r",
							"});\r",
							"\r",
							"pm.test(\"Price is 100$\", () => {\r",
							"    pm.expect(responseJson.price).to.eql(100);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/product/{{productId}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"product",
						"{{productId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "создать корзину",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => {\r",
							"  pm.response.to.have.status(201);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\": {{userId}}, \r\n    \"products\": [\r\n        {\"productId\": {{productId}}, \"quantity\": 2, \"price\": {{productPrice}}} \r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/cart/",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cart",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "просмотреть, что в корзине",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseJSON = JSON.parse(responseBody)\r",
							"\r",
							"var product1 = responseJSON.products[0];\r",
							"pm.test(\"Product1 corrected\", () => {\r",
							"    pm.expect(product1.productId).to.eql(pm.collectionVariables.get(\"productId\"));\r",
							"    pm.expect(product1.quantity).to.eql(2);\r",
							"    pm.expect(product1.price).to.eql(pm.collectionVariables.get(\"productPrice\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/cart/{{userId}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cart",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "order setLogLevel debug",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"configuredLevel\": \"DEBUG\",\r\n  \"effectiveLevel\": \"DEBUG\"\r\n}"
				},
				"url": {
					"raw": "http://{{baseUrl}}/order/actuator/loggers/ru.morozov",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"order",
						"actuator",
						"loggers",
						"ru.morozov"
					]
				}
			},
			"response": []
		},
		{
			"name": "создать заказ",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"idempotenceKey\", pm.variables.replaceIn(\"{{$randomInt}}\"))"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => {\r",
							"  pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"if (!!responseBody) {\r",
							"    var responseJSON = JSON.parse(responseBody)\r",
							"    pm.collectionVariables.set(\"orderId\", responseJSON[\"id\"])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Request-Id",
						"type": "text",
						"value": "{{idempotenceKey}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userId\": {{userId}},\r\n  \"deliveryDetails\": \"доставить в субботу\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/order/",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"order",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "появился новый заказа",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseJSON = JSON.parse(responseBody)\r",
							"\r",
							"pm.test(\"Status is NEW\", () => {\r",
							"const responseJson = pm.response.json();\r",
							"pm.expect(responseJson.status).to.eql('NEW');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/order/{{orderId}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"order",
						"{{orderId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "дубль заказа",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", () => {\r",
							"  pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Request-Id",
						"value": "{{idempotenceKey}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userId\": {{userId}},\r\n  \"deliveryDetails\": \"доставить в субботу\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/order/",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"order",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "подтверждение заказа",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Request-Id",
						"type": "text",
						"value": "1"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/order/{{orderId}}/confirm",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"order",
						"{{orderId}}",
						"confirm"
					]
				}
			},
			"response": []
		},
		{
			"name": "корзина удалилась",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", () => {\r",
							"  pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/cart/{{userId}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cart",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "проверка зарезервированного кол-ва товара на складе",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseJson = JSON.parse(responseBody)\r",
							"pm.collectionVariables.set(\"productPrice\", responseJson.price)\r",
							"\r",
							"pm.test(\"Reserved is 2\", () => {\r",
							"    pm.expect(responseJson.reserved).to.eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/product/{{productId}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"product",
						"{{productId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "деньги на счету пользователя",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseJSON = JSON.parse(responseBody)\r",
							"\r",
							"pm.test(\"Balance is 900$\", () => {\r",
							"const responseJson = pm.response.json();\r",
							"pm.expect(900).to.eql(responseJson.balance);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/bill/account/{{userId}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"bill",
						"account",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "доставка запланирована",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseJSON = JSON.parse(responseBody)\r",
							"\r",
							"pm.test(\"Status is ACTIVE\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.status).to.eql(\"ACTIVE\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/delivery/{{orderId}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"delivery",
						"{{orderId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "отправлено сообщение об успешном заказе",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseJSON = JSON.parse(responseBody)\r",
							"\r",
							"pm.test(\"Email sent\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    var mail = responseJson.find(function findByOrderId(element, index, array) {\r",
							"      return element.body.indexOf(pm.collectionVariables.get(\"orderId\")) > -1;\r",
							"    });\r",
							"    \r",
							"    pm.expect(pm.collectionVariables.get(\"userEmail\")).to.eql(mail.email);\r",
							"    pm.expect(\"Заказ успешно оплачен\").to.eql(mail.title);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/mail/tests/list",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"mail",
						"tests",
						"list"
					]
				}
			},
			"response": []
		},
		{
			"name": "заказ готов к выдачи",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseJSON = JSON.parse(responseBody)\r",
							"\r",
							"pm.test(\"Status is READY\", () => {\r",
							"const responseJson = pm.response.json();\r",
							"pm.expect(responseJson.status).to.eql('READY');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/order/{{orderId}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"order",
						"{{orderId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "выполнение заказа",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Request-Id",
						"type": "text",
						"value": "1"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/order/{{orderId}}/done",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"order",
						"{{orderId}}",
						"done"
					]
				}
			},
			"response": []
		},
		{
			"name": "заказ выполнен",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseJSON = JSON.parse(responseBody)\r",
							"\r",
							"pm.test(\"Status is DONE\", () => {\r",
							"const responseJson = pm.response.json();\r",
							"pm.expect(responseJson.status).to.eql('DONE');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/order/{{orderId}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"order",
						"{{orderId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "проверка кол-ва товара на складе",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseJson = JSON.parse(responseBody)\r",
							"pm.collectionVariables.set(\"productPrice\", responseJson.price)\r",
							"\r",
							"pm.test(\"Reserved is 0\", () => {\r",
							"    pm.expect(responseJson.reserved).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Qnt is 8\", () => {\r",
							"    pm.expect(responseJson.quantity).to.eql(8);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/product/{{productId}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"product",
						"{{productId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "доставка выполнена",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseJSON = JSON.parse(responseBody)\r",
							"\r",
							"pm.test(\"Status is DONE\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.status).to.eql(\"DONE\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/delivery/{{orderId}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"delivery",
						"{{orderId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "создать корзину",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => {\r",
							"  pm.response.to.have.status(201);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\": {{userId}}, \r\n    \"products\": [\r\n        {\"productId\": {{productId}}, \"quantity\": 2, \"price\": {{productPrice}}} \r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/cart/",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cart",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "деньги на счету пользователя",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseJSON = JSON.parse(responseBody)\r",
							"\r",
							"pm.test(\"Balance is 900$\", () => {\r",
							"const responseJson = pm.response.json();\r",
							"pm.expect(900).to.eql(responseJson.balance);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/bill/account/{{userId}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"bill",
						"account",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "создать заказ с недопустимой доставкой",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => {\r",
							"  pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"var responseJSON = JSON.parse(responseBody)\r",
							"pm.collectionVariables.set(\"orderId\", responseJSON[\"id\"])"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userId\": {{userId}},\r\n  \"deliveryDetails\": \"доставить в воскресенье\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/order/",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"order",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "подтверждение заказа",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Request-Id",
						"type": "text",
						"value": "1"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/order/{{orderId}}/confirm",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"order",
						"{{orderId}}",
						"confirm"
					]
				}
			},
			"response": []
		},
		{
			"name": "произошла отмена резерва товара на складе",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseJson = JSON.parse(responseBody)\r",
							"pm.collectionVariables.set(\"productPrice\", responseJson.price)\r",
							"\r",
							"pm.test(\"FreeQnt is 8\", () => {\r",
							"    pm.expect(responseJson.freeQnt).to.eql(8);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/product/{{productId}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"product",
						"{{productId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "деньги вернулись на счет пользователя",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseJSON = JSON.parse(responseBody)\r",
							"\r",
							"pm.test(\"Balance is 900$\", () => {\r",
							"const responseJson = pm.response.json();\r",
							"pm.expect(900).to.eql(responseJson.balance);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/bill/account/{{userId}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"bill",
						"account",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "заказ отменен",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseJSON = JSON.parse(responseBody)\r",
							"\r",
							"pm.test(\"Status is CANCELED\", () => {\r",
							"const responseJson = pm.response.json();\r",
							"pm.expect(responseJson.status).to.eql('CANCELED');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/order/{{orderId}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"order",
						"{{orderId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "отправлено сообщение о неудачном заказе",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseJSON = JSON.parse(responseBody)\r",
							"\r",
							"pm.test(\"Email sent\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    var mail = responseJson.find(function findByOrderId(element, index, array) {\r",
							"    return element.body.indexOf(pm.collectionVariables.get(\"orderId\")) > -1;\r",
							"    });\r",
							"    \r",
							"    pm.expect(pm.collectionVariables.get(\"userEmail\")).to.eql(mail.email);\r",
							"    pm.expect(\"Заказ отменен\").to.eql(mail.title);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/mail/tests/list",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"mail",
						"tests",
						"list"
					]
				}
			},
			"response": []
		},
		{
			"name": "выход",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Cookie",
						"value": "JSESSIONID={{sessionId}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/auth/logout",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"logout"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "arch.homework"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "userEmail",
			"value": ""
		},
		{
			"key": "productId",
			"value": ""
		},
		{
			"key": "productPrice",
			"value": ""
		},
		{
			"key": "orderId",
			"value": ""
		},
		{
			"key": "idempotenceKey",
			"value": ""
		},
		{
			"key": "userFirstName",
			"value": ""
		},
		{
			"key": "userLastName",
			"value": ""
		},
		{
			"key": "userLogin",
			"value": ""
		},
		{
			"key": "userPassword",
			"value": ""
		},
		{
			"key": "userPhone",
			"value": ""
		},
		{
			"key": "sessionId",
			"value": ""
		}
	]
}